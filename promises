const d = new Date();
let seconds = new Date().getTime();

let posts = [{
    title:"post one",
    body:"this is post one",
    second : `created at ${new Date().getTime()} ago`
},{
    title:"post two",
    body:"this is post two",
    second : `created at ${new Date().getTime()} ago`
}]

function getPost(){
    setTimeout(()=>{
        let output = "";
        posts.forEach((post)=>{
            output+=`<li>${post.title} created at ${post.second=new Date().getTime()} ago</li>`;
        })
        document.body.innerHTML = output;
    },1000)

}


function createPost (post){
    return new Promise((resolve,reject)=>{
        setTimeout(() => {
            posts.push(post);
            const error = false;
            if(!error){
                resolve()
            }else reject("error: some thing went wrong")
        }, 1000);
    })
}
function deletePost(){
    return new Promise((resolve,reject)=>{
        setTimeout(() => {
            if(posts.values!== 0){
                resolve(posts.pop())
            }else {
                reject("error: Array is empty now")
            }
        }, 1000);
    })
}

createPost({title:"post three",body:"this is post three",secound:`created at ${new Date().getTime()} ago`}).then(()=>{
    getPost()
    deletePost()
}).catch(err=>console.log(err))

createPost({title:"post four",body:"this is post four",secound:`created at ${new Date().getTime()} ago`}).then(()=>{
    getPost()
    deletePost()
}).catch(err=>console.log(err))


const promise1 = Promise.resolve("hello world")
const promise2 = 10;
const promise3 = new Promise((resolve)=>{
    setTimeout(resolve,2000,"good bye")
})
let updateLastUserActivityTime = new Promise((resolve,reject)=>{
    if(posts.values !== 0){
        resolve(`updateLastUserActivityTime ${posts[posts.length-1].second}`)
    }else{
        reject("error: something ia error")
    }
})
// sir sorry sir i did not understand updatelastuseractivity 
Promise.all([promise1,promise2,promise3,updateLastUserActivityTime]).then((values)=>console.log(values))

// question 4. we need promise.all because promise.all can run promises in parellelly 
